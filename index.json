[{"content":"C# as a language continues to evolve with new versions released every year. With the introduction of new language features, it can be challenging to stay up to date. This is the first post in a series where I will cover the new syntactic sugars incorporated in the recent versions of C#.\nA common task for C# developers is ensuring that classes are initialized with valid arguments. This often involves adding null checks in the class constructor, as illustrated below:\npublic Person(string firstName) { if (firstName is null) { throw new ArgumentNullException(nameof(firstName)); } this.firstName = firstName; } As you can see, it takes several lines of code to validate constructor parameters, which can be cumbersome. However, you can simply the validation code by using the null-coalescing operator ?? combined with a throw expression:\nthis.firstName = firstName ?? throw new ArgumentNullException(nameof(firstName)); While this reduces the code significantly, you still need to specify the parameter name for the ArgumentNullException, which helps in identifying the problematic argument from the exception message, such as Value cannot be null. (Parameter 'firstName').\nThe introduction of CallerArgumentExpression attribute in C# 10 allows for even more concise code. You can create a method like EnsureNotNull to simplify the null-check further:\npublic string EnsureNotNull( string argument, [CallerArgumentExpression(nameof(argument))] string paramName = null) { ArgumentNullException.ThrowIfNull(argument, paramName); return argument; } this.firstName = this.EnsureNotNull(firstName); This method highlights the essentials of caller argument expressions. A real-world solution will possibly implement an extension method that accommodates nullable checks and works with any argument type:\npublic static class EnsureExtensions { public static T EnsureNotNull\u0026lt;T\u0026gt;( [NotNull] this T? argument, [CallerArgumentExpression(nameof(argument))] string? paramName = null) { ArgumentNullException.ThrowIfNull(argument, paramName); return argument; } } this.firstName = firstName.EnsureNotNull(); If you prefer not to create custom methods or rely on third-party libraries, a straightforward two-liner solution is available using methods from the C# core library starting with .NET 6:\nArgumentNullException.ThrowIfNull(firstName); this.firstName = firstName; This approach not only simplifies your code but also enhances readability and maintainability, aligning with modern C# practices.\n","date":"October 02, 2024","permalink":"/posts/csharp-throw-expression/","section":"Posts","summary":"C# syntactic sugar series - Part 1.","title":"C# Throw Expression and Argument Expression"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"Welcome to my website! I\u0026rsquo;m really happy you stopped by.\nSpecial thanks to Katerina Limpitsouni for the excellent illustrations!\n","date":null,"permalink":"/","section":"Welcome!","summary":"","title":"Welcome!"},{"content":"Background #My younger son studies in an online classroom, and last week was the time for their oral tests. As you might know, written tests are often not reliable indicators of student performance in an online setting, especially when it is India :) The oral tests covered three subjects, each conducted on a separate day. Each day, the teacher would call students one at a time in a specific order to join her online and answer questions.\nThere were 31 students in the classroom. If the teacher had called the students by their roll numbers - from 1 to 31 - every day, those with higher roll numbers would always have to wait until the evening. To ensure that wait times were more evenly distributed, the teacher informed the parents that she would call students in the following order over the three days:\nDay 1: By roll numbers from 1 to 31. Day 2: By roll numbers from 31 to 1. Day 3: By roll numbers from 16 to 31, followed by 1 to 15. Upon hearing this, my immediate reaction was that this plan does not fully balance the wait times. For instance, the student with roll number 16 would wait for half the time on Days 1 and 2 but would not wait at all on Day 3. Conversely, the student with roll number 15 would experience nearly equal wait times on Days 1 and 2 but would have to wait until the end on Day 3. Thus, the wait times were not fairly distributed, and there might be a better arrangement that could produce a more even distribution of wait times across the three days.\nComparing Wait Time Distributions #A few days later, when my son\u0026rsquo;s oral tests began, I revisited this issue. Intuitively, I believed that the following arrangement would yield a better outcome than the teacher\u0026rsquo;s original plan:\nDay 1: By roll numbers from 1 to 31. Day 2: By roll numbers from 11 to 31, followed by 1 to 10. Day 3: By roll numbers from 21 to 31, followed by 1 to 20. It\u0026rsquo;s worth noting that the order for Day 1 can remain consistent, rolling from 1 to 31 regardless of the overall arrangement, without losing generality. For the sake of analysis, let\u0026rsquo;s assume that the first student called on any given day waits for 0 time-units, and this waiting time increases by 1 unit for each subsequent student, culminating in a wait time of 30 units for the last student of that day.\nWith the teacher\u0026rsquo;s arrangement,\nStudent with roll number 16 waits for (15 + 15 + 0) = 30 units. Student with roll number 17 waits for (16 + 14 + 1) = 31 units. Student with roll number 18 waits for (17 + 13 + 2) = 32 units. \u0026hellip; \u0026hellip; Student with roll number 13 waits for (12 + 18 + 28) = 58 units. Student with roll number 14 waits for (13 + 17 + 29) = 59 units. Student with roll number 15 waits for (14 + 16 + 30) = 60 units. Here\u0026rsquo;s how the wait times appear for each student:\nIn contrast, with the new arrangement I proposed,\nStudent with roll number 21 waits for (20 + 10 + 0) = 30 units. Student with roll number 11 waits for (10 + 0 + 21) = 31 units. Student with roll number 1 waits for (0 + 21 + 11) = 32 units. Student with roll number 22 waits for (21 + 11 + 1) = 33 units. \u0026hellip; \u0026hellip; Student with roll number 30 waits for (29 + 19 + 9) = 57 units. Student with roll number 20 waits for (19 + 9 + 30) = 58 units. Student with roll number 10 waits for (9 + 30 + 20) = 59 units. Student with roll number 31 waits for (30 + 20 + 10) = 60 units. Here\u0026rsquo;s how the new wait times look:\nUltimately, the new arrangement did not prove to be better or worse than the teacher\u0026rsquo;s plan; it merely redistributed the wait times among a different permutation of students.\nAfter some more scribbling on paper, I finally discovered an optimal arrangement. Take a look at the table below, which illustrates how the first and second halves of the roll numbers are interleaved on Day 3.\nDay 1 Sequence Day 2 Sequence Day 3 Sequence 1 17 16 2 18 31 3 19 15 4 20 30 5 21 14 6 22 29 \u0026hellip; \u0026hellip; \u0026hellip; 14 30 25 15 31 9 16 1 24 17 2 8 \u0026hellip; \u0026hellip; \u0026hellip; 30 15 17 31 16 1 To demonstrate that this arrangement is effective, here\u0026rsquo;s another table, this time ordered by roll numbers. Pay close attention to the differences in per-day wait times for successive students; this will give you a clearer understanding of how the arrangement achieves balanced wait times.\nRoll Number Day 1 Wait Time Day 2 Wait Time Day 3 Wait Time Total Wait Time 1 0 15 30 45 2 1 16 28 45 3 2 17 26 45 4 3 18 24 45 5 4 19 22 45 6 5 20 20 45 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 14 13 28 4 45 15 14 29 2 45 16 15 30 0 45 17 16 0 29 45 \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; \u0026hellip; 30 29 13 3 45 31 30 14 1 45 If the above table doesn\u0026rsquo;t clarify things, here\u0026rsquo;s a chart to help visualize the distribution of wait times.\nI also discovered a couple of other arrangements that provided balanced wait times. However, upon further inspection, it turned out that all of these could be derived by either shuffling the three days or rearranging the roll numbers. Essentially, there were no unique arrangements that could not be constructed by simply reordering the optimal arrangement mentioned above.\nGeneralizing the Solution #For an Arbitrary Number of Days #The challenge of arranging students arises only when the number of days is odd. If there were an even number of days, we could simply arrange students from start to end on every odd day and from end to start on the even days. Naturally, balancing wait times would be impossible with just a single day. However, for any odd number of days greater than one, we could start by arranging the students from start to end on every odd day, followed by end to start on the even days, continuing the pattern until we reach three days, at which point we could apply the same arrangement as described earlier.\nFor an Arbitrary Number of Students #Now, let\u0026rsquo;s consider the scenario where we have three days and an even number of students. Can we balance wait times for all students? Sadly, this is not possible, and here a brief explanation. Let\u0026rsquo;s denote the number of students as S. The wait times for students on a given day will progressively increase from 0 to S-1, averaging at (S-1)/2. Consequently, the three-day average would be 3(S-1)/2. If we assume there exists an arrangement that produces the same wait time for all students after three days, then the total wait time for each student would be equal the average wait time, which is 3(S-1)/2. This expression does not produce a whole number if S is even.\nBut let\u0026rsquo;s not lose hope. We can still achieve a near-balanced solution for an even number of students. We can create an arrangement where the total wait time is a whole number that is 0.5 above the value of 3(S-1)/2 for half of the students and is 0.5 below that value for the other half. The following table illustrates one such possible sequence for 6 students.\nDay 1 Sequence Day 2 Sequence Day 3 Sequence 1 4 3 2 5 6 3 6 2 4 1 5 5 2 1 6 3 4 And now the wait times ordered by the roll numbers.\nRoll Number Day 1 Wait Time Day 2 Wait Time Day 3 Wait Time Total Wait Time 1 0 3 4 7 2 1 4 2 7 3 2 5 0 7 4 3 0 5 8 5 4 1 3 8 6 5 2 1 8 Finally, for the sake of completeness, here\u0026rsquo;s a chart to visualize the above table.\nIn summary, the problem turned out to be far more challenging than I had anticipated. I realized that I could neither expect the teacher to find the solution nor the parents to remember the order if it were shared for their child. However, I made a couple of discoveries along the way, and I\u0026rsquo;m glad I spent time in tackling it.\n","date":"September 16, 2021","permalink":"/posts/wait-times/","section":"Posts","summary":"An arrangement that evenly distributes the waiting times for student in a classroom.","title":"Balancing the Wait Times"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]